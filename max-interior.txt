(define bt-max-interior
  (letrec ([helper 
             (lambda (tree)
               (cond
                 [(number? tree) (list #f tree tree)]
                 [else 
                   (let test ([left (helper (cadr tree))]
                              [right (helper (caddr tree))])
                     (cond
                       
                       [(and (>= (cadr left) (+ (cadr left) (cadr right))) (number? (cadr tree)) (number? (caddr tree))) 
                         (list (car tree) (+ (cadr left) (cadr right)) (+ (cadr left) (cadr right)))]
                       [(and (> (cadr right) (+ (cadr left) (cadr right))) (number? (cadr tree)) (number? (caddr tree)))
                        (list (car tree) (+ (cadr left) (cadr right)) (+ (cadr left) (cadr right)))]                      
                       [(>= (cadr left) (+ (cadr left) (cadr right))) left]
                       [(> (cadr right) (+ (cadr left) (cadr right))) right]
                       [else (list (car tree) (+ (cadr left) (cadr right)) (+ (cadr left) (cadr right)))])
                     )
                   ]
                 ))])
    (lambda (tree)
      (if (and (number? (cadr tree)) (number? (caddr tree)))
          (car tree)
          (let test2 ([left (helper (cadr tree))]
                     [right (helper (caddr tree))])
            (cond
             
              [(number? (caddr tree)) (car left)]
              [(number? (cadr tree)) (car right)]
              [(>= (cadr left) (+ (cadr left) (cadr right))) (car left)]
              [(> (cadr right) (+ (cadr left) (cadr right))) (car right)]
              [else (cond
                      [(> (cadr right) (cadr left)) (car right)]
                      [else (car left)]
                      )]
              ))))))